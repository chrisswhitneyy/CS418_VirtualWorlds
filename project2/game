/*******
CS 413 Project 2 - Puzzles

Purpose: 

Author: Christopher D. Wholeney 
*******/

//Aliases for PIXI.js
var Container = PIXI.Container, 
    Sprite = PIXI.Sprite, 
    Text = PIXI.Text, 
    Texture = PIXI.Texture, 
    autoDetectRenderer = PIXI.autoDetectRenderer,
    loader = PIXI.loader,
    resources = PIXI.loader.resources; 

//gets gameport div element
var gameport = document.getElementById("gameport");

//auto detect best render for the browsers
var renderer = autoDetectRenderer(400,400);
//appends renderer view to gameport 
gameport.appendChild(renderer.view); 

//game stages
var main_stage = new Container(0x000000, true); //main stage
var board = new Container(); //game board
var title_stage = new Container(); //title stage
var menu_stage = new Container(); //menu stage
var instruction_stage = new Container(); //instruction stage
var credit_stage = new Container();
var win = new Container(); //win text

PIXI.SCALE_MODES.DEFAULT = PIXI.SCALE_MODES.NEAREST;

//load assets
loader.add("assets/background.png");
loader.add("assets/golf_ball1.png");
loader.add("assets/sound/intro.mp3");

loader.load(titleSetup);

/********
Stage setup functions: A setup function for each stage is called 
before animating and handling input. Since spirites and other 
elements are needed by the run functions they are declared before.
********/

//title setup
var title,golf_ball,music;
function titleSetup(){
   background = new Sprite(resources["assets/background.png"].texture);
   main_stage.addChild(background);

   music = PIXI.audioManager.getAudio("assets/sound/intro.mp3");
   music.loop = true;
   music.play();

   title = new Text("Wacky Golf",{font:'50px Arial',fill: "black"}); 
   
   title.y = 150;
   title_stage.addChild(title);

   golf_ball = new Sprite(resources["assets/golf_ball1.png"].texture);

   golf_ball.y = 220;
   golf_ball.x = 330;
   golf_ball.anchor.x = 0.5;
   golf_ball.anchor.y = 0.5;

   title_stage.addChild(golf_ball);

   main_stage.addChild(title_stage); 
   state = titleRun;
   animate();
}

//menu setup
var play_button,credits_button,instruction_button,mute_button,unmute_button;
function menuSetup(){
  
  createjs.Tween.get(title.position).to({x:0,y:0},700,createjs.Ease.bounceOut);
  
  play_button = new Sprite();
  credits_button = new Sprite();
  instruction_button = new Sprite();
  mute_button = new Sprite();
  unmute_button = new Sprite();
  
  play_text = new Text("Play",{font:'20px Arial',fill: "black"});
  credits_text = new Text("Credits",{font:'20px Arial',fill: "black"});
  instruction_text = new Text("Instructions",{font:'20px Arial',fill: "black"});
  mute_text = new Text("Mute audio",{font:'20px Arial',fill: "black"});
  unmute_text = new Text("Unmute audio",{font:'20px Arial',fill: "black"});

  play_button.addChild(play_text);
  credits_button.addChild(credits_text);
  instruction_button.addChild(instruction_text);
  mute_button.addChild(mute_text);
  unmute_button.addChild(unmute_text);
  unmute_button.visible = false;
  
  play_button.interactive = true; 
  credits_button.interactive = true;
  instruction_button.interactive = true;
  mute_button.interactive = true;
  unmute_button.interactive = true;

  play_button.x = 10;
  play_button.y = 200;

  instruction_button.x = 10;
  instruction_button.y = 240;

  credits_button.x = 10;
  credits_button.y = 280;

  mute_button.x = 250;
  mute_button.y = 350;

  unmute_button.x = 250;
  unmute_button.y = 350;

  menu_stage.addChild(play_button); 
  menu_stage.addChild(credits_button);
  menu_stage.addChild(instruction_button);
  menu_stage.addChild(mute_button);
  menu_stage.addChild(unmute_button);
  main_stage.addChild(menu_stage);
  
  document.addEventListener("click", menuClickHandler());
  
  state = menuRun;
  animate();
}

//load assets
loader.add("assets/hole1.png");
loader.add("assets/obstacle.png");
loader.add("assets/sound/theme.mp3");
//loader.load(level1Setup);
//level1Setup 
var current_level,board,holes,state; 
function level1Setup(){

    //Delete after devolopement, title stage addes background 
    background = new Sprite(resources["assets/background.png"].texture);
    main_stage.addChild(background);

    music.manager.pause();
    music.remove();
    music = PIXI.audioManager.getAudio("assets/sound/theme.mp3");
    music.loop = true;
    music.manager.resume();

    var stage = new Container();
    var obstacle = new Sprite();
    current_level = new level(0,obstacle,stage,golf_ball);

    //adds golf_ballt to board stage
    stage.addChild(golf_ball); 
    current_level.placeGolfBall(10,20);
    current_level.placeHole(360,370);
    current_level.placeObsticale(40,200,0);

    //adds board to main_stage
    main_stage.addChild(stage);

    //set document event handler
    document.addEventListener('keydown',keydownEventHandler);
    
    //sets state
    state = levelRun;
 
    //call animate()
    animate();
}

//winSetup
function winSetup(){
    //creates instances of win text and adjusts position     
    var text = new Text("Congrats you won.",{font : '24px Arial', fill : 0x000000});
    //adds text to win stage
    win.addChild(text); 
    //adds win stage to main_stage
    main_stage.addChild(win);
    //render main_stage
    renderer.render(main_stage);
}
//instructionSetup
var back_button;
function instructionSetup(){
  var text = new Text("Use the WASD or arrow keys \n to move the golf ball into the hole",{font:'25px Arial',fill: "black"});
  instruction_stage.addChild(text);
  
  back_button = new Sprite();
  back_text = new Text("Back to Main Menu",{font:'20px Arial',fill: "black"});
  back_button.interactive = true;
  back_button.addChild(back_text);
  back_button.y = 300;
  instruction_stage.addChild(back_button);

  document.addEventListener("click", backButtonHandler());
  main_stage.addChild(instruction_stage);
  state = instructionRun;
  animate();
}
//creditSetup
function creditSetup(){
  var text = new Text("Credited by Christopher Whitney",{font:'25px Arial',fill: "black"});
  text.y = 150;
  credit_stage.addChild(text);

  back_button = new Sprite();
  back_text = new Text("Back to Main Menu",{font:'20px Arial',fill: "black"});
  back_button.interactive = true;
  back_button.addChild(back_text);
  back_button.y = 300;
  credit_stage.addChild(back_button);

  main_stage.addChild(credit_stage);
  document.addEventListener("click", backButtonHandler());
  state = creditRun;
  animate();
}


/********
Animate: request animation frame, calls state function, and 
renders main_stage
********/
function animate(){
    //Loops 60 times per second 
    requestAnimationFrame(animate);
    //Update the current game state 
    state(); 
    //Render the stage 
    renderer.render(main_stage);
} 

/********
Run functions: 
********/
function titleRun(){
    window.setTimeout(menuSetup,1000);
}
function menuRun(){
  golf_ball.rotation += 0.005;
}
function levelRun(){ 
  if(current_level.checkCollsion()==true){
    winSetup();
  }if(current_level.checkLoss() == true){
    //loosing setup
  }
}
function creditRun(){

}
function instructionRun(){

}

/*******
Classes: 
********/

//level: a general class used by all the different 
//instances of level. 
function level(diffuclty,obstacle,stage,golf_ball){
  
  this.diffuclty = diffuclty;
  this.stage = stage;
  this.golf_ball = golf_ball;
  this.obstacle = obstacle;
  this.hole;

  this.placeObsticale = function placessObsticale(x,y,rotation_amount){
    this.obstacle = new Sprite(resources["assets/obstacle.png"].texture);
    this.obstacle.x = x;
    this.obstacle.y = y;
    this.obstacle.rotation += rotation_amount;
    stage.addChild(this.obstacle);
  }
  this.placeCollector = function placeCollector(x,y){
    
  }
  this.placeHole= function placeHole(x,y){
    this.hole = new Sprite(resources["assets/hole1.png"].texture);
    this.hole.x = x;
    this.hole.y = y;
    this.hole.anchor.x = 0.5;
    this.hole.anchor.y = 0.5;
    stage.addChild(this.hole);
  }
  this.placeGolfBall = function placeGolfBall(x,y){
    //creates instances of golf_ball sprite and adjusts position
    this.golf_ball.x = x;
    this.golf_ball.y = y; 
    //sets holes anchors
    this.golf_ball.anchor.x = 0.5;
    this.golf_ball.anchor.y = 0.5;
    stage.addChild(this.golf_ball);
  }
  this.checkCollsion = function checkCollsion(){
    if (collsionCheck(this.golf_ball,this.hole) == true){
      return true;    
    }
    return false;
  }
  this.checkLoss = function checkLoss(){
    //if(number_lifes == 0){
    //  return true;
    //}
  }
}
/*******
Event handlers: 
********/
function keydownEventHandler(event){
    event.preventDefault(); //prevents default key behavior, scrolling
    
    var new_x, new_y,temp;
    var temp = current_level.golf_ball;
    //up 
    if (event.keyCode === 87 || event.keyCode === 38) {
      new_y = temp.position.y - 10;
      if (new_y > 10) {
        temp.position.y = new_y; //new y position
      }
    }
    
  //down
  if (event.keyCode === 83 || event.keyCode === 40) {
    new_y = temp.position.y + 10;
    if (new_y < renderer.height - 10) {
      temp.position.y = new_y;
    }
  }
  
  //left
  if (event.keyCode === 65 || event.keyCode === 37) {
    new_x = temp.position.x - 10;
    if (new_x > 10) {
      temp.position.x = new_x;
    }
  }
    //right
    if (event.keyCode === 68 || event.keyCode === 39) {
      new_x = temp.position.x + 10;
      if (new_x < renderer.width - 10) {
        temp.position.x = new_x;
      }
    }
    
    if(!collsionCheck(temp,current_level.obstacle)){
      console.log(collsionCheck(temp,current_level.obstacle));
      //renderer.render(main_stage);
    }else{

    }
  }

function menuClickHandler(event){

    var play_new_text = new Text("Play",{font:'20px Arial',fill: "white"});
    var play_old_text = new Text("Play",{font:'20px Arial',fill: "black"});
    var credits_new_text = new Text("Credits",{font:'20px Arial',fill: "white"});
    var credits_old_text = new Text("Credits",{font:'20px Arial',fill: "black"});
    var instruction_new_text = new Text("Instructions",{font:'20px Arial',fill: "white"});
    var instruction_old_text = new Text("Instructions",{font:'20px Arial',fill: "black"});
    var mute_text = new Text("Mute text",{font:'20px Arial',fill: "black"});
    var unmute_text = new Text("Unmute text",{font:'20px Arial',fill: "black"});


    //Play button handler
		play_button.click = function(data){
			// click!
      title_stage.visible = false;
      menu_stage.visible = false;
      level1Setup();
		}
    // set the mouseover callback..
    play_button.mouseover = function(data){
      this.isOver = true;
      play_button.removeChildAt(0);
      play_button.addChild(play_new_text);
    }
    play_button.mouseout = function(data){
      this.isOver = false;
      play_button.removeChildAt(0);
      play_button.addChild(play_old_text);
    }

    credits_button.click = function(data){
      title_stage.visible = false;
      menu_stage.visible = false;
      credit_stage.visible = true;
      creditSetup();
    }
    credits_button.mouseover = function(data){
      this.isOver = true;
      credits_button.removeChildAt(0);
      credits_button.addChild(credits_new_text);
    }
    credits_button.mouseout = function(data){
      this.isOver = false;
      credits_button.removeChildAt(0);
      credits_button.addChild(credits_old_text);
    }
    
    instruction_button.click = function(data){
      title_stage.visible = false; 
      menu_stage.visible = false;
      instruction_stage.visible = true;
      instructionSetup();
    }
    instruction_button.mouseover = function(data){
      this.isOver = true;
      instruction_button.removeChildAt(0);
      instruction_button.addChild(instruction_new_text);
    }
    instruction_button.mouseout = function(data){
      this.isOver = false;
      instruction_button.removeChildAt(0);
      instruction_button.addChild(instruction_old_text);
    }

    mute_button.click = function(data){
      mute_button.visible = false;
      unmute_button.visible = true;
      theme.manager.mute();
    }
    unmute_button.click = function(data){
      theme.manager.unmute();
      unmute_button.visible = false;
      mute_button.visible = true;
    }

}

function backButtonHandler(event){
  new_text = new Text("Back to Main Menu",{font:'20px Arial',fill: "white"});
  old_text = new Text("Back to Main Menu",{font:'20px Arial',fill: "black"});

  back_button.mouseover = function(data){
    this.isOver = true;
    back_button.removeChildAt(0);
    back_button.addChild(new_text);
  }
  back_button.mouseout = function(data){
    this.isOver = false;
    back_button.removeChildAt(0);
    back_button.addChild(old_text);
  }
  back_button.click = function(data){
    credit_stage.visible = false;
    instruction_stage.visible = false;
    title_stage.visible = true;
    menu_stage.visible = true;
  }
}

/********
Helper functions
********/
function collsionCheck(sprite1,sprite2){
    if (sprite1.x < sprite2.x + sprite2.width &&
      sprite1.x + sprite1.width > sprite2.x &&
      sprite1.y < sprite2.y + sprite2.height &&
      sprite1.height + sprite1.y > sprite2.y) {
      return true; // collision detected!
    }
}

